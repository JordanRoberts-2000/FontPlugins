import fs from "fs";

const googleFontsMetaDataUrl = "https://fonts.google.com/metadata/fonts";
const viteFontPluginConfigTypePath =
  "packages/viteFontPlugin/src/types/pluginConfigType.ts";

const response = await fetch(googleFontsMetaDataUrl);
if (!response.ok) {
  throw new Error(
    `Failed to fetch google fonts meta data from url: ${googleFontsMetaDataUrl}`
  );
}

let fontsMetaDataJSON;
try {
  fontsMetaDataJSON = await response.json();
} catch (error) {
  throw new Error(
    `Failed to parse JSON from the ${googleFontsMetaDataUrl} response: ${error.message}`
  );
}

const familyMetaDataJSON = fontsMetaDataJSON.familyMetadataList;

if (!familyMetaDataJSON) {
  throw new Error(
    `Failed to retrieve familyMetadataList from ${googleFontsMetaDataUrl} JSON response`
  );
}

const ignoredSubsets = [
  "menu",
  "japanese",
  "korean",
  "chinese-simplified",
  "chinese-hongkong",
  "chinese-traditional",
];

let FontPluginConfigContent = "";

familyMetaDataJSON.forEach(({ family, subsets, fonts, axes }) => {
  const weights = Object.keys(fonts).filter((key) => !key.includes("i"));
  const italicWeights = Object.keys(fonts)
    .filter((key) => key.endsWith("i"))
    .map((el) => el.slice(0, -1));
  const relevantSubsets = subsets.filter(
    (subset) => !ignoredSubsets.includes(subset)
  );

  FontPluginConfigContent += `
    | {
        font: "${family}",
        className?: string,
        cssVariable?: string,
        variableFont?: ${axes.length > 0 ? "true" : "never"},
        preload?: boolean,
        display?: "auto" | "block" | "swap" | "fallback" | "optional",
        weight?: ${'"' + weights.join('" | "') + '"'} | Array<${
    '"' + weights.join('" | "') + '"'
  }>,
        italic?: ${
          italicWeights.length > 0
            ? `${'"' + italicWeights.join('" | "') + '"'} | Array<${
                '"' + italicWeights.join('" | "') + '"'
              }>,`
            : "never"
        }
        subsets?: ${
          relevantSubsets.length > 0
            ? `"all" | ${'"' + relevantSubsets.join('" | "') + '"'} | Array<${
                '"' + relevantSubsets.join('" | "') + '"'
              }>,`
            : "never"
        }
    }`;
});

const fontPluginConfigType = `
// Generated by scripts/generateConfigType.ts

export type FontPluginConfig = Array<${FontPluginConfigContent}>
`;

try {
  fs.writeFileSync(viteFontPluginConfigTypePath, fontPluginConfigType);
} catch (err) {
  throw new Error(
    `Failed to write fontPluginConfigType to ${viteFontPluginConfigTypePath}, error: ${err}`
  );
}

console.log("Generated FontPluginConfigType successfully");
