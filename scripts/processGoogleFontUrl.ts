import fs from "fs";
import fetchFontMetaData from "../utils/fetchFontMetaData.js";

const googleFontsMetaDataUrl = "https://fonts.google.com/metadata/fonts";
export const errorPrefix = "[Script - GeneratePluginConfigType]";
const viteFontPluginConfigTypePath =
  "packages/viteFontPlugin/src/types/pluginConfigType.ts";

const ignoredSubsets = [
  "menu",
  "japanese",
  "korean",
  "chinese-simplified",
  "chinese-hongkong",
  "chinese-traditional",
];

const familyMetadataList = await fetchFontMetaData(googleFontsMetaDataUrl);

// Todo: generate JSON for viewing

// Todo: generate typescript map

// Todo: generate config type

let fontConfigType = "";
let fontTitlesType = "";

familyMetadataList.forEach(({ family, subsets, fonts, axes, isOpenSource }) => {
  const weights = Object.keys(fonts).filter((key) => !key.includes("i"));
  const italicWeights = Object.keys(fonts)
    .filter((key) => key.endsWith("i"))
    .map((el) => el.slice(0, -1));
  const relevantSubsets = subsets.filter(
    (subset) => !ignoredSubsets.includes(subset)
  );
  const wghtAxis = axes.find((axis) => axis.tag === "wght");

  fontTitlesType += `| "${family}"\n`;

  fontConfigType += `
    | {
        font: "${family}",
        className?: string,
        cssVariable?: string,
        preload?: boolean,
        modifiedFallback?: boolean,
        customFallback?: string,
        display?: "auto" | "block" | "swap" | "fallback" | "optional",
        weight?: "all" | ${'"' + weights.join('" | "') + '"'} | Array<${
    '"' + weights.join('" | "') + '"'
  }> ${
    weights.length > 1
      ? ` | { from: ${'"' + weights.slice(0, -1).join('" | "') + '"'}, to: ${
          '"' + weights.slice(1).join('" | "') + '"'
        }}`
      : ""
  }
        italic?: ${
          italicWeights.length > 0
            ? `"all" | boolean | ${
                '"' + italicWeights.join('" | "') + '"'
              } | Array<${'"' + italicWeights.join('" | "') + '"'}> ${
                italicWeights.length > 1
                  ? `| { from: ${
                      '"' + italicWeights.slice(0, -1).join('" | "') + '"'
                    }, to: ${'"' + italicWeights.slice(1).join('" | "') + '"'}}`
                  : ""
              },`
            : "never,"
        }
        subsets?: ${
          relevantSubsets.length > 0
            ? `"all" | ${'"' + relevantSubsets.join('" | "') + '"'} | Array<${
                '"' + relevantSubsets.join('" | "') + '"'
              }>,`
            : "never,"
        }
        axes?: ${
          axes.length > 0
            ? `"all" | Array<${
                '"' + axes.map((axis) => axis.tag).join('" | "') + '"'
              }>,`
            : "never,"
        }
    }`;
});

const fontPluginConfigType = `// Generated by scripts/generateConfigType.ts

export type FontPluginConfig = {
  config?: {
    css?: "inlineHead" | "buildFile",
    selfHost?: boolean,
    defaultPreload?: boolean,
    defaultDisplay?: "auto" | "block" | "swap" | "fallback" | "optional",
    includeItalicsByDefault: boolean,
  },
  fonts: Array<${fontConfigType} ${fontTitlesType}>
}
`;

try {
  fs.writeFileSync(viteFontPluginConfigTypePath, fontPluginConfigType);
} catch (err) {
  throw new Error(
    `Failed to write fontPluginConfigType to ${viteFontPluginConfigTypePath}, error: ${err}`
  );
}

console.log("Generated FontPluginConfigType successfully");
