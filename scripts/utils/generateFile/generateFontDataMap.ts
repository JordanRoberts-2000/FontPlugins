import type { FontData } from "../fontMetaDataSchema.js";
import fs from "fs/promises";
import formatDate from "../formatDate.js";
import { scriptPrefix } from "../../processGoogleFonts.js";

const generateFile = "packages/viteFontPlugin/src/utils/googleFontDataMap.ts";

export default async function generateFontDataMap(fontData: FontData) {
  const fontDataMap = `// Generated by scripts/processGoogleFonts.ts: ${formatDate(
    new Date()
  )}

export type FontData = {
  subsets: string[];
  weights: {
    roman: number[];
    italic: number[];
  };
  axes: string[];
  isOpenSource: boolean;
};

export const fontData: Map<string, FontData> = new Map([
${fontData
  .map(
    ({ family, ...rest }) => `  ["${family}", ${JSON.stringify(rest, null, 2)}]`
  )
  .join(",\n")}
]);
`;

  try {
    await fs.writeFile(generateFile, fontDataMap);
  } catch (error) {
    throw new Error(
      `${scriptPrefix} Error creating '${generateFile}': ${error}`
    );
  }
}
