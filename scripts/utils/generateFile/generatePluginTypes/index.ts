import type { FontData } from "../../fontMetaDataSchema.js";
import fs from "fs/promises";
import formatDate from "../../formatDate.js";
import {
  DISPLAY_OPTIONS,
  SUBSETS_OPTIONS,
} from "../../../../shared/constants.js";
import { scriptPrefix } from "../../../processGoogleFonts.js";
import generateSettingsType from "./generateSettingsType.js";
import generateGoogleFontTypes from "./generateGoogleFontTypes.js";

const generateFile = "packages/viteFontPlugin/src/types/pluginConfigType.ts";

export default async function generatePluginTypes(fontData: FontData) {
  const generatedFontConfigType = pluginConfigType(fontData);

  try {
    await fs.writeFile(generateFile, generatedFontConfigType);
  } catch (err) {
    throw new Error(`${scriptPrefix} Error creating '${generateFile}': ${err}`);
  }
}

function pluginConfigType(fontData: FontData) {
  return `// Generated by scripts/processGoogleFonts.ts: ${formatDate(
    new Date()
  )}

export type PluginConfig = {
  settings?: PluginConfigSettings,
  googleFonts: GoogleFonts},
}

export type DisplayOptions = "${DISPLAY_OPTIONS.join(" | ")}";

export type SubsetOptions = "${SUBSETS_OPTIONS.join(" | ")}";

${generateSettingsType()}

${generateGoogleFontTypes(fontData)}
`;
}
