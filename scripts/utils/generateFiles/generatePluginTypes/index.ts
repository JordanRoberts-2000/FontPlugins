import type { FontData } from "../../fontMetaData/fontMetaData.schema.js";
import fs from "fs/promises";
import formatDate from "../../formatDate.js";
import {
  DISPLAY_OPTIONS,
  SUBSETS_OPTIONS,
} from "../../../../shared/constants.js";
import { scriptPrefix } from "../../../processGoogleFonts.js";
import generateSettingsType from "./generateSettingsType.js";
import generateGoogleFontTypes from "./generateGoogleFontTypes.js";
import { join } from "path";

const generateFile = "pluginConfigType.ts";

export default async function generatePluginTypes(
  fontData: FontData,
  folderPaths: string[]
) {
  const generatedFontConfigType = pluginConfigType(fontData);

  try {
    await Promise.all(
      folderPaths.map((path) => {
        fs.writeFile(join(path, generateFile), generatedFontConfigType);
      })
    );
  } catch (err) {
    throw new Error(`${scriptPrefix} Error creating '${generateFile}': ${err}`);
  }
}

function pluginConfigType(fontData: FontData) {
  return `// Generated by scripts/processGoogleFonts: ${formatDate(new Date())}

export type PluginConfig = {
  settings?: PluginConfigSettings,
  googleFonts: GoogleFonts
};

export type DisplayOptions = "${DISPLAY_OPTIONS.join('" | "')}";

export type SubsetOptions = "${SUBSETS_OPTIONS.join('" | "')}";
${generateSettingsType()}
${generateGoogleFontTypes(fontData)}
`;
}
